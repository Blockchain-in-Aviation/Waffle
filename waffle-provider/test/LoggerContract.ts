import {Wallet, ContractFactory} from 'ethers';

export async function deployLogger(wallet: Wallet, param: string) {
  const factory = new ContractFactory(ABI, BYTECODE, wallet);
  return factory.deploy(param, {gasLimit: 1000000});
}

const LOGGER_CONTRACT = `
// full version here https://github.com/nomiclabs/buidler/blob/development/packages/buidler-core/console.sol
pragma solidity ^0.6.0;

library console {
  address constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);

  function log(string memory p0) internal view {
    (bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature("log(string)", p0));
    ignored;
  }
  
  function log(string memory p0, string memory p1) internal view {
    (bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature("log(string,string)", p0, p1));
    ignored;
  }

  function log(string memory p0, uint p1) internal view {
    (bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature("log(string,uint)", p0, p1));
    ignored;
  }
}

contract Counter {
  uint counter;
  
  constructor(string memory param) public {
    console.log("Deployed logger with ", param);
    counter = 0;
  }
  
  function up() external {
    counter++;
    console.log("‚òùÔ∏è Counter = ", counter);
  }
  
  function down() external {
    if (counter == 0) {
      console.log("Can't go down");
      revert();
    }
    counter--;
    console.log("üëáÔ∏è Counter = ", counter);
  }
  
  function get() external view returns (uint) {
    console.log("Somebody tried to get counter");
    return counter;
  }
}
`;

const ABI = [
  {
    inputs: [
      {
        internalType: 'string',
        name: 'param',
        type: 'string'
      }
    ],
    stateMutability: 'nonpayable',
    type: 'constructor'
  },
  {
    inputs: [],
    name: 'down',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function'
  },
  {
    inputs: [],
    name: 'get',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256'
      }
    ],
    stateMutability: 'view',
    type: 'function'
  },
  {
    inputs: [],
    name: 'up',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function'
  }
];

// eslint-disable-next-line max-len
const BYTECODE = '608060405234801561001057600080fd5b50604051610b00380380610b008339818101604052602081101561003357600080fd5b810190808051604051939291908464010000000082111561005357600080fd5b8382019150602082018581111561006957600080fd5b825186600182028301116401000000008211171561008657600080fd5b8083526020830192505050908051906020019080838360005b838110156100ba57808201518184015260208101905061009f565b50505050905090810190601f1680156100e75780820380516001836020036101000a031916815260200191505b506040525050506101376040518060400160405280601581526020017f4465706c6f796564206c6f6767657220776974682000000000000000000000008152508261014460201b6101b61760201c565b6000808190555050610369565b60006a636f6e736f6c652e6c6f6773ffffffffffffffffffffffffffffffffffffffff168383604051602401808060200180602001838103835285818151815260200191508051906020019080838360005b838110156101b1578082015181840152602081019050610196565b50505050905090810190601f1680156101de5780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b838110156102175780820151818401526020810190506101fc565b50505050905090810190601f1680156102445780820380516001836020036101000a031916815260200191505b509450505050506040516020818303038152906040527f4b5c4277000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b602083106102fb57805182526020820191506020810190506020830392506102d8565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d806000811461035b576040519150601f19603f3d011682016040523d82523d6000602084013e610360565b606091505b50509050505050565b610788806103786000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80636d4ce63c14610046578063d5a49e0114610064578063d83379281461006e575b600080fd5b61004e610078565b6040518082815260200191505060405180910390f35b61006c6100c0565b005b610076610114565b005b60006100b86040518060400160405280601d81526020017f536f6d65626f647920747269656420746f2067657420636f756e7465720000008152506103db565b600054905090565b60008081548092919060010191905055506101126040518060400160405280601181526020017fe2989defb88f20436f756e746572203d20000000000000000000000000000000815250600054610592565b565b6000805414156101615761015c6040518060400160405280600d81526020017f43616e277420676f20646f776e000000000000000000000000000000000000008152506103db565b600080fd5b6000808154809291906001900391905055506101b46040518060400160405280601281526020017ff09f9187efb88f20436f756e746572203d200000000000000000000000000000815250600054610592565b565b60006a636f6e736f6c652e6c6f6773ffffffffffffffffffffffffffffffffffffffff168383604051602401808060200180602001838103835285818151815260200191508051906020019080838360005b83811015610223578082015181840152602081019050610208565b50505050905090810190601f1680156102505780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b8381101561028957808201518184015260208101905061026e565b50505050905090810190601f1680156102b65780820380516001836020036101000a031916815260200191505b509450505050506040516020818303038152906040527f4b5c4277000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b6020831061036d578051825260208201915060208101905060208303925061034a565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d80600081146103cd576040519150601f19603f3d011682016040523d82523d6000602084013e6103d2565b606091505b50509050505050565b60006a636f6e736f6c652e6c6f6773ffffffffffffffffffffffffffffffffffffffff16826040516024018080602001828103825283818151815260200191508051906020019080838360005b83811015610443578082015181840152602081019050610428565b50505050905090810190601f1680156104705780820380516001836020036101000a031916815260200191505b50925050506040516020818303038152906040527f41304fac000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b602083106105255780518252602082019150602081019050602083039250610502565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d8060008114610585576040519150601f19603f3d011682016040523d82523d6000602084013e61058a565b606091505b505090505050565b60006a636f6e736f6c652e6c6f6773ffffffffffffffffffffffffffffffffffffffff1683836040516024018080602001838152602001828103825284818151815260200191508051906020019080838360005b838110156106015780820151818401526020810190506105e6565b50505050905090810190601f16801561062e5780820380516001836020036101000a031916815260200191505b5093505050506040516020818303038152906040527f9710a9d0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b602083106106e457805182526020820191506020810190506020830392506106c1565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d8060008114610744576040519150601f19603f3d011682016040523d82523d6000602084013e610749565b606091505b5050905050505056fea2646970667358221220b9d820bb4f002e612767ba259327bb8f596e599f200cfd76a516b82fbd0c34f564736f6c63430006080033';
